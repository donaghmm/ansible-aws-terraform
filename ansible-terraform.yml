---

- name: Create AWS resources
  hosts: localhost
  connection: local
  gather_facts: False

  tasks:
  - name: Create a security group
    ec2_group:
      name: ansible
      description: "Ansible Security Group"
      region: "{{aws_region}}"
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      rules:
        - proto: all
          cidr_ip: 0.0.0.0/0
        - proto: all
          group_name: ansible
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: firewall

  - name: Create an EC2 instance
    ec2:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      key_name: "{{key_name}}"
      region: "{{aws_region}}"
      group_id: "{{firewall.group_id}}"
      instance_type: "{{instance_type}}"
      image: "{{ami_id}}"
      wait: yes
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 10
          delete_on_termination: true
      exact_count: 1
      count_tag:
         Name: ansible-demo
      instance_tags:
         Name: ansible-demo
    register: ec2

  - name: Add new instance to host group
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: launched
      ansible_user: ubuntu
      ansible_python_interpreter: /usr/bin/python3
#      ansible_user: "{{ ansible_user }}"
#      ansible_python_interpreter: "{{ ansible_python_interpreter }}"
    with_items: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      delay: 60
      timeout: 320
      state: started
    with_items: "{{ ec2.instances }}"

- name: Configure instance with tomcat8 and apache
  hosts: launched
  become: True
  gather_facts: True
  roles:
    - { role: apache, http_port: 80, domain: 'example.com' }
    - role: java
      when: "ansible_os_family == 'Debian'"
      java_packages:
        - openjdk-8-jdk
    - { role: tomcat8, tomcat_java_home: /usr/lib/jvm/java-8-openjdk-amd64 }


- name: Create image with installed tomcat8 and apache
  hosts: localhost
  connection: local
  tasks:
    - name: Create image
      ec2_ami:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        instance_id: '{{ item.id }}'
        region: "{{aws_region}}"
        wait: yes
        name: demo-aws-ansible-terraform-v7
        tags:
          Name: demo-aws-ansible-terraform-v7
          Service: TestService
      with_items: "{{ ec2.instances }}"
      register: image

    - name: Terminate the instance that were previously launched
      ec2:
        state: 'absent'
        instance_ids: '{{ item.id }}'
        region: "{{aws_region}}"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
      with_items: "{{ ec2.instances }}"

    - lineinfile:
        path: Terraform/variables.tf
        regexp: '"us-east-1" = '
        line: '"us-east-1" = "{{ item.image_id }}"'
      with_items: "{{ image.results }}"

    - name: Change the working directory to Terraform for Cloud Provisioning and do terraform initialization
      shell: terraform init
      args:
        chdir: Terraform/

    - name: Change the working directory to Terraform for Cloud Provisioning and do terraform apply
      shell: terraform apply -auto-approve
      args:
        chdir: Terraform/
